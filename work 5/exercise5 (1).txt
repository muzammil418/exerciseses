Programming Challenge: 5 (Half-Century)

Dated: 14th of August, 2025
=========================
0. Read all the rules below.
1. The output on cmd must match the Expected Output exactly.
2. All programs must start with a comment of program description.
3. Write solution logic in comments before writing the program in comments.
4. Make variable and function names meaningful. In other words, a variable name should tell the name of the value it holds. Write code as if it's going to be read by another human. Example:
	- number of players -> num_players
	- sum of odd numbers -> sum_odds
	- counter -> count or counter
	- rectangle area -> rect_area or rectangle_area
5. Write properly formatted code.
6. Use of ChatGPT or Google's Gemini (in google search) is not allowed for formulas or logic of the program. To find syntax solutions or advice or reading material use: https://duckduckgo.com/
7.	a. For every function that is used from the C library (such as stdio, math, etc.) write it's signature (input/output usage in comments before use). For example, the signature of the 'pow' function is:
	double pow(double base, double exponent);
	b. For every function you implement, write it's input and output in the comments inside the function definition. For example:
	int add_one(int number){
		// Input: int number
		// Output: int
		
		return number+1;
	}
8. Write each program step by step and make sure to check each step before updating the code.
9. The final source code (C files) should be submitted by email.

==========================================================

41. Print numbers in reverse order

Write a program to take a number n as input, and print the numbers in reverse till 0. In other words, print from n to 0.

Test Data:
Input: 9


Expected Output:
9 8 7 6 5 4 3 2 1 0

----------------------------------------------------------

42. Compute series sum S=1+1/2+1/3+...+1/50

Write a C program to calculate the value of S where S = 1 + 1/2 + 1/3 + â€¦ + 1/50.


Expected Output:
Value of S: 4.50

----------------------------------------------------------

43. Compute series sum S=1+3/2+5/4+7/8

Hint:
	- If we divide 5 by 2 like 5/2, then 5 is called the numerator and 2 is the denominator. In this program, the numerators follow a pattern: 1,3,5,7,.... Can you somehow make this output in a single loop without an if-statement?
	- The denominator follows the pattern: 1, 2, 4, 8, 16... What's the logic to create this pattern? Can you make a variable that will hold this value during each loop cycle?
	- Implement the above hints seperately and combine them to solve the main problem 43.

Write a C program to calculate the value of S where S = 1/1 + 3/2 + 5/4 + 7/8.


Expected Output:
Value of series: 4.62

----------------------------------------------------------

44. Calculate the average of student math marks until termination

Write a C program to calculate the average mathematics marks of some students. Input 0 (excluding to calculate the average) or a negative value to terminate the input process.

Test Data :
Input Mathematics marks (0 to terminate): 10
15
20
25
0


Expected Output:
Average marks in Mathematics: 17.50 

----------------------------------------------------------

45. Print p lines of q numbers in sequence starting from 1

Write a C program that reads two integers p and q, prints p number of lines in a sequence of 1 to b in a line.

Test Data :
Input number of lines: 5
Number of characters in a line: 6


Expected Output:
1 2 3 4 5 6
7 8 9 10 11 12
13 14 15 16 17 18
19 20 21 22 23 24
25 26 27 28 29 30

----------------------------------------------------------

46. Find all divisors of a given integer

Write a C program that finds all the divisors of an integer.

Hint: The devisors of a number are all other numbers that can divide it completely (without remainder). For example, the divisors of 6 are 2, 3, & 6 because no other number (smaller than 6) can divide 6 without leaving a remainder. A number greater than 6 can not be it's divisor because it will always give a decimal result. Example: 6/7 => 0.857. User calculator to verify that all numbers below 6 are it's divisors.


Test Data:
Input an integer: 45


Expected Output:
All the divisor of 45 are:
1
3
5
9
15
45 

----------------------------------------------------------

47. Draw a square pattern on the console

Write a program to take the length of square as input from the user and draw it using # character in the output.


Test Data:
Input: 4


Expected Output:
####
####
####
####

----------------------------------------------------------

48. Draw a triangle pattern on the console

Write a program to take the length of perpendicular of a right angle triangle as input from the user and draw it using * character in the output.

Test Data:
Input: 5


Expected Output:
*
**
***
****
*****

----------------------------------------------------------

49. Draw a triangle pattern on the console reversed

Write a program to take the length of perpendicular of a right angle triangle as input from the user and draw it using * character in the output.

Hint: Can you break down this problem to make it simpler?

Test Data:
Input: 5


Expected Output:
    *
   **
  ***
 ****
*****

----------------------------------------------------------

50a. Swap values of two variables - easy

Given two variables a and b, write code so that the value of b is stored in a and the value of a is stored in b when the program ends.

You can use a 3rd variable to temporarily store values.

Sample code:

int main(){
	int a = 3;
	int b = 5;
	int tmp = 0; // variable to remember value, if needed
	
	printf("a = %d, b = %d \n", a, b); // Output a = 3, b = 5
	
	// Logic to swap variable values of a and b
	
	printf("a = %d, b = %d \n", a, b); // Output a = 5, b = 3
	
	return 0;
}

----------------------------------------------------------

50b. Swap values of two variables

Update the code in problem 50a to only use two variable a and b. No additional variable(s) can be used for this logic.